"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const AWS = require("aws-sdk");
const client = new AWS.CodePipeline({ apiVersion: '2015-07-09' });
const TIMEOUT_IN_MINUTES = 5;
const sleep = (seconds) => {
    return new Promise(resolve => setTimeout(resolve, seconds * 1000));
};
async function handler(event, _context) {
    const { PipelineName: pipelineName, StageName: stageName, ActionName: actionName, } = event;
    function parseState(response) {
        const stages = response.stageStates;
        const validStages = stages === null || stages === void 0 ? void 0 : stages.filter((s) => s.stageName === stageName);
        const manualApproval = validStages.length &&
            validStages[0].actionStates.filter((state) => state.actionName === actionName);
        const latest = manualApproval && manualApproval.length &&
            manualApproval[0].latestExecution;
        return latest ? latest.token : undefined;
    }
    const deadline = Date.now() + TIMEOUT_IN_MINUTES * 60000;
    while (Date.now() < deadline) {
        const response = await client.getPipelineState({ name: pipelineName }).promise();
        const token = parseState(response);
        if (token) {
            await client.putApprovalResult({
                pipelineName,
                actionName,
                stageName,
                result: {
                    summary: 'No security changes detected. Automatically approved by Lambda.',
                    status: 'Approved',
                },
                token,
            }).promise();
            return;
        }
        await sleep(5);
    }
}
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBNkQ7QUFDN0QsK0JBQStCO0FBQy9CLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDOUIsT0FBTyxJQUFJLE9BQU8sQ0FBTyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBQ0ssS0FBSyxVQUFVLE9BQU8sQ0FBQyxLQUFVLEVBQUUsUUFBYTtJQUNuRCxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDNUYsU0FBUyxVQUFVLENBQUMsUUFBYTtRQUM3QixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sV0FBVyxHQUFHLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUM7UUFDMUUsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDLE1BQU07WUFDckMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDeEYsTUFBTSxNQUFNLEdBQUcsY0FBYyxJQUFJLGNBQWMsQ0FBQyxNQUFNO1lBQ2xELGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDdEMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUN6RCxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUU7UUFDMUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqRixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsSUFBSSxLQUFLLEVBQUU7WUFDUCxNQUFNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztnQkFDM0IsWUFBWTtnQkFDWixVQUFVO2dCQUNWLFNBQVM7Z0JBQ1QsTUFBTSxFQUFFO29CQUNKLE9BQU8sRUFBRSxpRUFBaUU7b0JBQzFFLE1BQU0sRUFBRSxVQUFVO2lCQUNyQjtnQkFDRCxLQUFLO2FBQ1IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2IsT0FBTztTQUNWO1FBQ0QsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7QUFDTCxDQUFDO0FBOUJELDBCQThCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcbmNvbnN0IGNsaWVudCA9IG5ldyBBV1MuQ29kZVBpcGVsaW5lKHsgYXBpVmVyc2lvbjogJzIwMTUtMDctMDknIH0pO1xuY29uc3QgVElNRU9VVF9JTl9NSU5VVEVTID0gNTtcbmNvbnN0IHNsZWVwID0gKHNlY29uZHM6IG51bWJlcikgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyAqIDEwMDApKTtcbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudDogYW55LCBfY29udGV4dDogYW55KSB7XG4gICAgY29uc3QgeyBQaXBlbGluZU5hbWU6IHBpcGVsaW5lTmFtZSwgU3RhZ2VOYW1lOiBzdGFnZU5hbWUsIEFjdGlvbk5hbWU6IGFjdGlvbk5hbWUsIH0gPSBldmVudDtcbiAgICBmdW5jdGlvbiBwYXJzZVN0YXRlKHJlc3BvbnNlOiBhbnkpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCBzdGFnZXMgPSByZXNwb25zZS5zdGFnZVN0YXRlcztcbiAgICAgICAgY29uc3QgdmFsaWRTdGFnZXMgPSBzdGFnZXM/LmZpbHRlcigoczogYW55KSA9PiBzLnN0YWdlTmFtZSA9PT0gc3RhZ2VOYW1lKTtcbiAgICAgICAgY29uc3QgbWFudWFsQXBwcm92YWwgPSB2YWxpZFN0YWdlcy5sZW5ndGggJiZcbiAgICAgICAgICAgIHZhbGlkU3RhZ2VzWzBdLmFjdGlvblN0YXRlcy5maWx0ZXIoKHN0YXRlOiBhbnkpID0+IHN0YXRlLmFjdGlvbk5hbWUgPT09IGFjdGlvbk5hbWUpO1xuICAgICAgICBjb25zdCBsYXRlc3QgPSBtYW51YWxBcHByb3ZhbCAmJiBtYW51YWxBcHByb3ZhbC5sZW5ndGggJiZcbiAgICAgICAgICAgIG1hbnVhbEFwcHJvdmFsWzBdLmxhdGVzdEV4ZWN1dGlvbjtcbiAgICAgICAgcmV0dXJuIGxhdGVzdCA/IGxhdGVzdC50b2tlbiA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZGVhZGxpbmUgPSBEYXRlLm5vdygpICsgVElNRU9VVF9JTl9NSU5VVEVTICogNjAwMDA7XG4gICAgd2hpbGUgKERhdGUubm93KCkgPCBkZWFkbGluZSkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXRQaXBlbGluZVN0YXRlKHsgbmFtZTogcGlwZWxpbmVOYW1lIH0pLnByb21pc2UoKTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBwYXJzZVN0YXRlKHJlc3BvbnNlKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnQucHV0QXBwcm92YWxSZXN1bHQoe1xuICAgICAgICAgICAgICAgIHBpcGVsaW5lTmFtZSxcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgIHN0YWdlTmFtZSxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogJ05vIHNlY3VyaXR5IGNoYW5nZXMgZGV0ZWN0ZWQuIEF1dG9tYXRpY2FsbHkgYXBwcm92ZWQgYnkgTGFtYmRhLicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ0FwcHJvdmVkJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgfSkucHJvbWlzZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHNsZWVwKDUpO1xuICAgIH1cbn1cbiJdfQ==